{
  fileContents:
fn fact(n: int): int {
    if n == 0 {
        return 1
    } else {
        return n * fact(n - 1)
    }
}

const console = std.io.console
console.printline(fact(0))
console.printline(fact(1))
console.printline(fact(5))
console.printline(fact(10))
console.printline(fact(15)),
  tokens: [
    {
      Kind: Fn,
      SourceValue: fn,
      Span: {
        ByteLength: 2,
        Serialized: Samples/factorial.sol(0:2) at Line 1:1
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 3,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(3:7) at Line 1:4
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 7,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(7:8) at Line 1:8
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 8,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(8:9) at Line 1:9
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: :,
      Span: {
        ByteOffset: 9,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(9:10) at Line 1:10
      }
    },
    {
      Kind: Identifier,
      SourceValue: int,
      Span: {
        ByteOffset: 11,
        ByteLength: 3,
        Serialized: Samples/factorial.sol(11:14) at Line 1:12
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 14,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(14:15) at Line 1:15
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: :,
      Span: {
        ByteOffset: 15,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(15:16) at Line 1:16
      }
    },
    {
      Kind: Identifier,
      SourceValue: int,
      Span: {
        ByteOffset: 17,
        ByteLength: 3,
        Serialized: Samples/factorial.sol(17:20) at Line 1:18
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 21,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(21:22) at Line 1:22
      }
    },
    {
      Kind: If,
      SourceValue: if,
      Span: {
        ByteOffset: 28,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(28:30) at Line 2:6
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 31,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(31:32) at Line 2:9
      }
    },
    {
      Kind: ComparatorSymbol,
      SourceValue: ==,
      Span: {
        ByteOffset: 33,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(33:35) at Line 2:11
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 0,
      ParsedValue: 0,
      Span: {
        ByteOffset: 36,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(36:37) at Line 2:14
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 38,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(38:39) at Line 2:16
      }
    },
    {
      Kind: Return,
      SourceValue: return,
      Span: {
        ByteOffset: 49,
        ByteLength: 6,
        Serialized: Samples/factorial.sol(49:55) at Line 3:10
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 56,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(56:57) at Line 3:17
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 63,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(63:64) at Line 4:6
      }
    },
    {
      Kind: Else,
      SourceValue: else,
      Span: {
        ByteOffset: 65,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(65:69) at Line 4:8
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 70,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(70:71) at Line 4:13
      }
    },
    {
      Kind: Return,
      SourceValue: return,
      Span: {
        ByteOffset: 81,
        ByteLength: 6,
        Serialized: Samples/factorial.sol(81:87) at Line 5:10
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 88,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(88:89) at Line 5:17
      }
    },
    {
      Kind: MathSymbol,
      SourceValue: *,
      Span: {
        ByteOffset: 90,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(90:91) at Line 5:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 92,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(92:96) at Line 5:21
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 96,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(96:97) at Line 5:25
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 97,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(97:98) at Line 5:26
      }
    },
    {
      Kind: MathSymbol,
      SourceValue: -,
      Span: {
        ByteOffset: 99,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(99:100) at Line 5:28
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 101,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(101:102) at Line 5:30
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 102,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(102:103) at Line 5:31
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 109,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(109:110) at Line 6:6
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 112,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(112:113) at Line 7:2
      }
    },
    {
      Kind: Const,
      SourceValue: const,
      Span: {
        ByteOffset: 117,
        ByteLength: 5,
        Serialized: Samples/factorial.sol(117:122) at Line 9:2
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 123,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(123:130) at Line 9:8
      }
    },
    {
      Kind: AssignmentSymbol,
      SourceValue: =,
      Span: {
        ByteOffset: 131,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(131:132) at Line 9:16
      }
    },
    {
      Kind: Identifier,
      SourceValue: std,
      Span: {
        ByteOffset: 133,
        ByteLength: 3,
        Serialized: Samples/factorial.sol(133:136) at Line 9:18
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 136,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(136:137) at Line 9:21
      }
    },
    {
      Kind: Identifier,
      SourceValue: io,
      Span: {
        ByteOffset: 137,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(137:139) at Line 9:22
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 139,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(139:140) at Line 9:24
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 140,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(140:147) at Line 9:25
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 149,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(149:156) at Line 10:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 156,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(156:157) at Line 10:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 157,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(157:166) at Line 10:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 166,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(166:167) at Line 10:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 167,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(167:171) at Line 10:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 171,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(171:172) at Line 10:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 0,
      ParsedValue: 0,
      Span: {
        ByteOffset: 172,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(172:173) at Line 10:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 173,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(173:174) at Line 10:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 174,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(174:175) at Line 10:27
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 177,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(177:184) at Line 11:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 184,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(184:185) at Line 11:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 185,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(185:194) at Line 11:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 194,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(194:195) at Line 11:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 195,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(195:199) at Line 11:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 199,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(199:200) at Line 11:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 200,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(200:201) at Line 11:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 201,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(201:202) at Line 11:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 202,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(202:203) at Line 11:27
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 205,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(205:212) at Line 12:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 212,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(212:213) at Line 12:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 213,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(213:222) at Line 12:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 222,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(222:223) at Line 12:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 223,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(223:227) at Line 12:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 227,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(227:228) at Line 12:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 5,
      ParsedValue: 5,
      Span: {
        ByteOffset: 228,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(228:229) at Line 12:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 229,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(229:230) at Line 12:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 230,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(230:231) at Line 12:27
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 233,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(233:240) at Line 13:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 240,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(240:241) at Line 13:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 241,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(241:250) at Line 13:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 250,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(250:251) at Line 13:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 251,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(251:255) at Line 13:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 255,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(255:256) at Line 13:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 10,
      ParsedValue: 10,
      Span: {
        ByteOffset: 256,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(256:258) at Line 13:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 258,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(258:259) at Line 13:27
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 259,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(259:260) at Line 13:28
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 262,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(262:269) at Line 14:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 269,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(269:270) at Line 14:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 270,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(270:279) at Line 14:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 279,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(279:280) at Line 14:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 280,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(280:284) at Line 14:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 284,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(284:285) at Line 14:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 15,
      ParsedValue: 15,
      Span: {
        ByteOffset: 285,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(285:287) at Line 14:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 287,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(287:288) at Line 14:27
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 288,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(288:289) at Line 14:28
      }
    }
  ],
  ast: {
    Statements: [
      {
        Args: [
          {
            Name: {
              Kind: Identifier,
              SourceValue: n,
              Span: {
                ByteOffset: 8,
                ByteLength: 1,
                Serialized: Samples/factorial.sol(8:9) at Line 1:9
              }
            },
            AstKind: FunctionArg,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 11,
                  ByteLength: 3,
                  Serialized: Samples/factorial.sol(11:14) at Line 1:12
                }
              },
              GenericArgs: []
            }
          }
        ],
        Identifier: {
          Kind: Identifier,
          SourceValue: fact,
          Span: {
            ByteOffset: 3,
            ByteLength: 4,
            Serialized: Samples/factorial.sol(3:7) at Line 1:4
          }
        },
        Body: {
          Statements: [
            {
              Condition: {
                KindGroup: ComparatorSymbol,
                Kind: Equal,
                Target: {
                  Value: n,
                  AstKind: AtomExpression,
                  TypeAnnotation: {
                    Type: FreshTypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: 0
                    },
                    GenericArgs: []
                  }
                },
                Arg: {
                  Kind: ValueInt,
                  Value: 0,
                  AstKind: AtomExpression,
                  TypeAnnotation: {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int
                    },
                    GenericArgs: []
                  }
                },
                AstKind: BinaryOperatorExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: bool
                  },
                  GenericArgs: []
                }
              },
              Body: {
                Statements: [
                  {
                    Value: {
                      Kind: ValueInt,
                      Value: 1,
                      AstKind: AtomExpression,
                      TypeAnnotation: {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    },
                    AstKind: ReturnExpression
                  }
                ],
                AstKind: StatementBody
              },
              ElseIf: [],
              Else: {
                Statements: [
                  {
                    Value: {
                      KindGroup: MathSymbol,
                      Kind: BinaryMultiply,
                      Target: {
                        Value: n,
                        AstKind: AtomExpression,
                        TypeAnnotation: {
                          Type: FreshTypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: 0
                          },
                          GenericArgs: []
                        }
                      },
                      Arg: {
                        Target: {
                          Value: fact,
                          AstKind: AtomExpression,
                          TypeAnnotation: {
                            Type: TypeAst,
                            Identifier: {
                              Kind: Identifier,
                              SourceValue: Fn
                            },
                            GenericArgs: [
                              {
                                Type: TypeAst,
                                Identifier: {
                                  Kind: Identifier,
                                  SourceValue: Tuple
                                },
                                GenericArgs: [
                                  {
                                    Type: TypeAst,
                                    Identifier: {
                                      Kind: Identifier,
                                      SourceValue: int
                                    },
                                    GenericArgs: []
                                  }
                                ]
                              },
                              {
                                Type: TypeAst,
                                Identifier: {
                                  Kind: Identifier,
                                  SourceValue: int,
                                  Span: {
                                    ByteOffset: 17,
                                    ByteLength: 3,
                                    Serialized: Samples/factorial.sol(17:20) at Line 1:18
                                  }
                                },
                                GenericArgs: []
                              }
                            ]
                          }
                        },
                        Args: [
                          {
                            KindGroup: MathSymbol,
                            Kind: BinaryMinus,
                            Target: {
                              Value: n,
                              AstKind: AtomExpression,
                              TypeAnnotation: {
                                Type: FreshTypeAst,
                                Identifier: {
                                  Kind: Identifier,
                                  SourceValue: 0
                                },
                                GenericArgs: []
                              }
                            },
                            Arg: {
                              Kind: ValueInt,
                              Value: 1,
                              AstKind: AtomExpression,
                              TypeAnnotation: {
                                Type: TypeAst,
                                Identifier: {
                                  Kind: Identifier,
                                  SourceValue: int
                                },
                                GenericArgs: []
                              }
                            },
                            AstKind: BinaryOperatorExpression,
                            TypeAnnotation: {
                              Type: TypeAst,
                              Identifier: {
                                Kind: Identifier,
                                SourceValue: int
                              },
                              GenericArgs: []
                            }
                          }
                        ],
                        AstKind: CallOperatorExpression,
                        TypeAnnotation: {
                          Type: TypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: int,
                            Span: {
                              ByteOffset: 17,
                              ByteLength: 3,
                              Serialized: Samples/factorial.sol(17:20) at Line 1:18
                            }
                          },
                          GenericArgs: []
                        }
                      },
                      AstKind: BinaryOperatorExpression,
                      TypeAnnotation: {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int,
                          Span: {
                            ByteOffset: 17,
                            ByteLength: 3,
                            Serialized: Samples/factorial.sol(17:20) at Line 1:18
                          }
                        },
                        GenericArgs: []
                      }
                    },
                    AstKind: ReturnExpression
                  }
                ],
                AstKind: StatementBody
              },
              Kind: If,
              AstKind: IfExpression
            }
          ],
          AstKind: StatementBody
        },
        ReturnType: {
          Type: TypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: int,
            Span: {
              ByteOffset: 17,
              ByteLength: 3,
              Serialized: Samples/factorial.sol(17:20) at Line 1:18
            }
          },
          GenericArgs: []
        },
        Kind: Function,
        AstKind: FunctionDeclaration,
        TypeAnnotation: {
          Type: TypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: int,
            Span: {
              ByteOffset: 17,
              ByteLength: 3,
              Serialized: Samples/factorial.sol(17:20) at Line 1:18
            }
          },
          GenericArgs: []
        }
      },
      {
        IsConst: true,
        Identifier: {
          Kind: Identifier,
          SourceValue: console,
          Span: {
            ByteOffset: 123,
            ByteLength: 7,
            Serialized: Samples/factorial.sol(123:130) at Line 9:8
          }
        },
        IdentifierValue: console,
        Expression: {
          Kind: Member,
          Target: {
            Value: std,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: io,
              AstKind: AtomExpression
            },
            {
              Value: console,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 3,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 3
            },
            GenericArgs: []
          }
        },
        AstKind: VariableDeclaration,
        TypeAnnotation: {
          Id: 3,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 3
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 4,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 4
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 17,
                        ByteLength: 3,
                        Serialized: Samples/factorial.sol(17:20) at Line 1:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 0,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 17,
                  ByteLength: 3,
                  Serialized: Samples/factorial.sol(17:20) at Line 1:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 6,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 6
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 7,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 7
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 17,
                        ByteLength: 3,
                        Serialized: Samples/factorial.sol(17:20) at Line 1:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 1,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 17,
                  ByteLength: 3,
                  Serialized: Samples/factorial.sol(17:20) at Line 1:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 9,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 9
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 10,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 10
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 17,
                        ByteLength: 3,
                        Serialized: Samples/factorial.sol(17:20) at Line 1:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 5,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 17,
                  ByteLength: 3,
                  Serialized: Samples/factorial.sol(17:20) at Line 1:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 12,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 12
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 13,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 13
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 17,
                        ByteLength: 3,
                        Serialized: Samples/factorial.sol(17:20) at Line 1:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 10,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 17,
                  ByteLength: 3,
                  Serialized: Samples/factorial.sol(17:20) at Line 1:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 15,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 15
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 16,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 16
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 17,
                        ByteLength: 3,
                        Serialized: Samples/factorial.sol(17:20) at Line 1:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 15,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 17,
                  ByteLength: 3,
                  Serialized: Samples/factorial.sol(17:20) at Line 1:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 18,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 18
          },
          GenericArgs: []
        }
      }
    ],
    AstKind: StatementBody
  },
  consoleLogs: [
    1,
    1,
    120,
    3628800,
    2004310016
  ]
}