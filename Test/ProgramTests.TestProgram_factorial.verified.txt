{
  fileContents:
fn fact(n) {
    if n == 0 {
        return 1
    } else {
        return n * fact(n - 1)
    }
}

const console = std.io.console
console.printline(fact(0))
console.printline(fact(1))
console.printline(fact(5))
console.printline(fact(10))
console.printline(fact(15)),
  tokens: [
    {
      Kind: Fn,
      SourceValue: fn,
      Span: {
        ByteLength: 2,
        Serialized: Samples/factorial.sol(0:2) at Line 1:1
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 3,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(3:7) at Line 1:4
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 7,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(7:8) at Line 1:8
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 8,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(8:9) at Line 1:9
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 9,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(9:10) at Line 1:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 11,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(11:12) at Line 1:12
      }
    },
    {
      Kind: If,
      SourceValue: if,
      Span: {
        ByteOffset: 18,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(18:20) at Line 2:6
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 21,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(21:22) at Line 2:9
      }
    },
    {
      Kind: ComparatorSymbol,
      SourceValue: ==,
      Span: {
        ByteOffset: 23,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(23:25) at Line 2:11
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 0,
      ParsedValue: 0,
      Span: {
        ByteOffset: 26,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(26:27) at Line 2:14
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 28,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(28:29) at Line 2:16
      }
    },
    {
      Kind: Return,
      SourceValue: return,
      Span: {
        ByteOffset: 39,
        ByteLength: 6,
        Serialized: Samples/factorial.sol(39:45) at Line 3:10
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 46,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(46:47) at Line 3:17
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 53,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(53:54) at Line 4:6
      }
    },
    {
      Kind: Else,
      SourceValue: else,
      Span: {
        ByteOffset: 55,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(55:59) at Line 4:8
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 60,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(60:61) at Line 4:13
      }
    },
    {
      Kind: Return,
      SourceValue: return,
      Span: {
        ByteOffset: 71,
        ByteLength: 6,
        Serialized: Samples/factorial.sol(71:77) at Line 5:10
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 78,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(78:79) at Line 5:17
      }
    },
    {
      Kind: MathSymbol,
      SourceValue: *,
      Span: {
        ByteOffset: 80,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(80:81) at Line 5:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 82,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(82:86) at Line 5:21
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 86,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(86:87) at Line 5:25
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 87,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(87:88) at Line 5:26
      }
    },
    {
      Kind: MathSymbol,
      SourceValue: -,
      Span: {
        ByteOffset: 89,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(89:90) at Line 5:28
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 91,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(91:92) at Line 5:30
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 92,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(92:93) at Line 5:31
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 99,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(99:100) at Line 6:6
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 102,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(102:103) at Line 7:2
      }
    },
    {
      Kind: Const,
      SourceValue: const,
      Span: {
        ByteOffset: 107,
        ByteLength: 5,
        Serialized: Samples/factorial.sol(107:112) at Line 9:2
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 113,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(113:120) at Line 9:8
      }
    },
    {
      Kind: AssignmentSymbol,
      SourceValue: =,
      Span: {
        ByteOffset: 121,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(121:122) at Line 9:16
      }
    },
    {
      Kind: Identifier,
      SourceValue: std,
      Span: {
        ByteOffset: 123,
        ByteLength: 3,
        Serialized: Samples/factorial.sol(123:126) at Line 9:18
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 126,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(126:127) at Line 9:21
      }
    },
    {
      Kind: Identifier,
      SourceValue: io,
      Span: {
        ByteOffset: 127,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(127:129) at Line 9:22
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 129,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(129:130) at Line 9:24
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 130,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(130:137) at Line 9:25
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 139,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(139:146) at Line 10:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 146,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(146:147) at Line 10:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 147,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(147:156) at Line 10:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 156,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(156:157) at Line 10:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 157,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(157:161) at Line 10:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 161,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(161:162) at Line 10:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 0,
      ParsedValue: 0,
      Span: {
        ByteOffset: 162,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(162:163) at Line 10:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 163,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(163:164) at Line 10:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 164,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(164:165) at Line 10:27
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 167,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(167:174) at Line 11:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 174,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(174:175) at Line 11:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 175,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(175:184) at Line 11:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 184,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(184:185) at Line 11:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 185,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(185:189) at Line 11:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 189,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(189:190) at Line 11:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 190,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(190:191) at Line 11:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 191,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(191:192) at Line 11:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 192,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(192:193) at Line 11:27
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 195,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(195:202) at Line 12:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 202,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(202:203) at Line 12:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 203,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(203:212) at Line 12:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 212,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(212:213) at Line 12:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 213,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(213:217) at Line 12:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 217,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(217:218) at Line 12:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 5,
      ParsedValue: 5,
      Span: {
        ByteOffset: 218,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(218:219) at Line 12:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 219,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(219:220) at Line 12:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 220,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(220:221) at Line 12:27
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 223,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(223:230) at Line 13:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 230,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(230:231) at Line 13:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 231,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(231:240) at Line 13:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 240,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(240:241) at Line 13:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 241,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(241:245) at Line 13:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 245,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(245:246) at Line 13:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 10,
      ParsedValue: 10,
      Span: {
        ByteOffset: 246,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(246:248) at Line 13:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 248,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(248:249) at Line 13:27
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 249,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(249:250) at Line 13:28
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 252,
        ByteLength: 7,
        Serialized: Samples/factorial.sol(252:259) at Line 14:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 259,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(259:260) at Line 14:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 260,
        ByteLength: 9,
        Serialized: Samples/factorial.sol(260:269) at Line 14:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 269,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(269:270) at Line 14:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fact,
      Span: {
        ByteOffset: 270,
        ByteLength: 4,
        Serialized: Samples/factorial.sol(270:274) at Line 14:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 274,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(274:275) at Line 14:24
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 15,
      ParsedValue: 15,
      Span: {
        ByteOffset: 275,
        ByteLength: 2,
        Serialized: Samples/factorial.sol(275:277) at Line 14:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 277,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(277:278) at Line 14:27
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 278,
        ByteLength: 1,
        Serialized: Samples/factorial.sol(278:279) at Line 14:28
      }
    }
  ],
  ast: {
    Statements: [
      {
        Args: [
          {
            Name: {
              Kind: Identifier,
              SourceValue: n,
              Span: {
                ByteOffset: 8,
                ByteLength: 1,
                Serialized: Samples/factorial.sol(8:9) at Line 1:9
              }
            },
            AstKind: FunctionArg
          }
        ],
        Identifier: {
          Kind: Identifier,
          SourceValue: fact,
          Span: {
            ByteOffset: 3,
            ByteLength: 4,
            Serialized: Samples/factorial.sol(3:7) at Line 1:4
          }
        },
        Body: {
          Statements: [
            {
              Condition: {
                Kind: Equal,
                Target: {
                  Value: n,
                  AstKind: AtomExpression
                },
                Arg: {
                  Kind: ValueInt,
                  Value: 0,
                  AstKind: AtomExpression
                },
                AstKind: BinaryOperatorExpression
              },
              Body: {
                Statements: [
                  {
                    Value: {
                      Kind: ValueInt,
                      Value: 1,
                      AstKind: AtomExpression
                    },
                    AstKind: ReturnExpression
                  }
                ],
                AstKind: StatementBody
              },
              ElseIf: [],
              Else: {
                Statements: [
                  {
                    Value: {
                      Kind: BinaryMultiply,
                      Target: {
                        Value: n,
                        AstKind: AtomExpression
                      },
                      Arg: {
                        Target: {
                          Value: fact,
                          AstKind: AtomExpression
                        },
                        Args: [
                          {
                            Kind: BinaryMinus,
                            Target: {
                              Value: n,
                              AstKind: AtomExpression
                            },
                            Arg: {
                              Kind: ValueInt,
                              Value: 1,
                              AstKind: AtomExpression
                            },
                            AstKind: BinaryOperatorExpression
                          }
                        ],
                        AstKind: CallOperatorExpression
                      },
                      AstKind: BinaryOperatorExpression
                    },
                    AstKind: ReturnExpression
                  }
                ],
                AstKind: StatementBody
              },
              Kind: If,
              AstKind: IfExpression
            }
          ],
          AstKind: StatementBody
        },
        Kind: Function,
        AstKind: FunctionDeclaration
      },
      {
        IsConst: true,
        Identifier: {
          Kind: Identifier,
          SourceValue: console,
          Span: {
            ByteOffset: 113,
            ByteLength: 7,
            Serialized: Samples/factorial.sol(113:120) at Line 9:8
          }
        },
        IdentifierValue: console,
        Expression: {
          Kind: Member,
          Target: {
            Value: std,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: io,
              AstKind: AtomExpression
            },
            {
              Value: console,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression
        },
        AstKind: VariableDeclaration
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 0,
                AstKind: AtomExpression
              }
            ],
            AstKind: CallOperatorExpression
          }
        ],
        AstKind: CallOperatorExpression
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 1,
                AstKind: AtomExpression
              }
            ],
            AstKind: CallOperatorExpression
          }
        ],
        AstKind: CallOperatorExpression
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 5,
                AstKind: AtomExpression
              }
            ],
            AstKind: CallOperatorExpression
          }
        ],
        AstKind: CallOperatorExpression
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 10,
                AstKind: AtomExpression
              }
            ],
            AstKind: CallOperatorExpression
          }
        ],
        AstKind: CallOperatorExpression
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression
        },
        Args: [
          {
            Target: {
              Value: fact,
              AstKind: AtomExpression
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 15,
                AstKind: AtomExpression
              }
            ],
            AstKind: CallOperatorExpression
          }
        ],
        AstKind: CallOperatorExpression
      }
    ],
    AstKind: StatementBody
  },
  consoleLogs: [
    1,
    1,
    120,
    3628800,
    2004310016
  ]
}