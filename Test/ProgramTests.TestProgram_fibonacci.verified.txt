{
  fileContents:
-- 0, 1, 1, 2, 3, 5, 8, 13, ...
fn fib(n: int): int {
    if (n == 0) { return 0 }
    if (n <= 2) { return 1 }
    return fib(n - 1) + fib(n - 2)
}

const console = std.io.console
console.printline(fib(5))
console.printline(fib(0))
console.printline(fib(1))
console.printline(fib(2))
console.printline(fib(20)),
  tokens: [
    {
      Kind: Comment,
      SourceValue:
-- 0, 1, 1, 2, 3, 5, 8, 13, ...
,
      Span: {
        ByteLength: 33,
        Serialized: Samples/fibonacci.sol(0:33) at Line 1:1
      }
    },
    {
      Kind: Fn,
      SourceValue: fn,
      Span: {
        ByteOffset: 33,
        ByteLength: 2,
        Serialized: Samples/fibonacci.sol(33:35) at Line 2:2
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 36,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(36:39) at Line 2:5
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 39,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(39:40) at Line 2:8
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 40,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(40:41) at Line 2:9
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: :,
      Span: {
        ByteOffset: 41,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(41:42) at Line 2:10
      }
    },
    {
      Kind: Identifier,
      SourceValue: int,
      Span: {
        ByteOffset: 43,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(43:46) at Line 2:12
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 46,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(46:47) at Line 2:15
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: :,
      Span: {
        ByteOffset: 47,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(47:48) at Line 2:16
      }
    },
    {
      Kind: Identifier,
      SourceValue: int,
      Span: {
        ByteOffset: 49,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 53,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(53:54) at Line 2:22
      }
    },
    {
      Kind: If,
      SourceValue: if,
      Span: {
        ByteOffset: 60,
        ByteLength: 2,
        Serialized: Samples/fibonacci.sol(60:62) at Line 3:6
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 63,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(63:64) at Line 3:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 64,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(64:65) at Line 3:10
      }
    },
    {
      Kind: ComparatorSymbol,
      SourceValue: ==,
      Span: {
        ByteOffset: 66,
        ByteLength: 2,
        Serialized: Samples/fibonacci.sol(66:68) at Line 3:12
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 0,
      ParsedValue: 0,
      Span: {
        ByteOffset: 69,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(69:70) at Line 3:15
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 70,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(70:71) at Line 3:16
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 72,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(72:73) at Line 3:18
      }
    },
    {
      Kind: Return,
      SourceValue: return,
      Span: {
        ByteOffset: 74,
        ByteLength: 6,
        Serialized: Samples/fibonacci.sol(74:80) at Line 3:20
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 0,
      ParsedValue: 0,
      Span: {
        ByteOffset: 81,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(81:82) at Line 3:27
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 83,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(83:84) at Line 3:29
      }
    },
    {
      Kind: If,
      SourceValue: if,
      Span: {
        ByteOffset: 90,
        ByteLength: 2,
        Serialized: Samples/fibonacci.sol(90:92) at Line 4:6
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 93,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(93:94) at Line 4:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 94,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(94:95) at Line 4:10
      }
    },
    {
      Kind: ComparatorSymbol,
      SourceValue: <=,
      Span: {
        ByteOffset: 96,
        ByteLength: 2,
        Serialized: Samples/fibonacci.sol(96:98) at Line 4:12
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 2,
      ParsedValue: 2,
      Span: {
        ByteOffset: 99,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(99:100) at Line 4:15
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 100,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(100:101) at Line 4:16
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: {,
      Span: {
        ByteOffset: 102,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(102:103) at Line 4:18
      }
    },
    {
      Kind: Return,
      SourceValue: return,
      Span: {
        ByteOffset: 104,
        ByteLength: 6,
        Serialized: Samples/fibonacci.sol(104:110) at Line 4:20
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 111,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(111:112) at Line 4:27
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 113,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(113:114) at Line 4:29
      }
    },
    {
      Kind: Return,
      SourceValue: return,
      Span: {
        ByteOffset: 120,
        ByteLength: 6,
        Serialized: Samples/fibonacci.sol(120:126) at Line 5:6
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 127,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(127:130) at Line 5:13
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 130,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(130:131) at Line 5:16
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 131,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(131:132) at Line 5:17
      }
    },
    {
      Kind: MathSymbol,
      SourceValue: -,
      Span: {
        ByteOffset: 133,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(133:134) at Line 5:19
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 135,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(135:136) at Line 5:21
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 136,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(136:137) at Line 5:22
      }
    },
    {
      Kind: MathSymbol,
      SourceValue: +,
      Span: {
        ByteOffset: 138,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(138:139) at Line 5:24
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 140,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(140:143) at Line 5:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 143,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(143:144) at Line 5:29
      }
    },
    {
      Kind: Identifier,
      SourceValue: n,
      Span: {
        ByteOffset: 144,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(144:145) at Line 5:30
      }
    },
    {
      Kind: MathSymbol,
      SourceValue: -,
      Span: {
        ByteOffset: 146,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(146:147) at Line 5:32
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 2,
      ParsedValue: 2,
      Span: {
        ByteOffset: 148,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(148:149) at Line 5:34
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 149,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(149:150) at Line 5:35
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: },
      Span: {
        ByteOffset: 152,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(152:153) at Line 6:2
      }
    },
    {
      Kind: Const,
      SourceValue: const,
      Span: {
        ByteOffset: 157,
        ByteLength: 5,
        Serialized: Samples/fibonacci.sol(157:162) at Line 8:2
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 163,
        ByteLength: 7,
        Serialized: Samples/fibonacci.sol(163:170) at Line 8:8
      }
    },
    {
      Kind: AssignmentSymbol,
      SourceValue: =,
      Span: {
        ByteOffset: 171,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(171:172) at Line 8:16
      }
    },
    {
      Kind: Identifier,
      SourceValue: std,
      Span: {
        ByteOffset: 173,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(173:176) at Line 8:18
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 176,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(176:177) at Line 8:21
      }
    },
    {
      Kind: Identifier,
      SourceValue: io,
      Span: {
        ByteOffset: 177,
        ByteLength: 2,
        Serialized: Samples/fibonacci.sol(177:179) at Line 8:22
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 179,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(179:180) at Line 8:24
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 180,
        ByteLength: 7,
        Serialized: Samples/fibonacci.sol(180:187) at Line 8:25
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 189,
        ByteLength: 7,
        Serialized: Samples/fibonacci.sol(189:196) at Line 9:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 196,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(196:197) at Line 9:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 197,
        ByteLength: 9,
        Serialized: Samples/fibonacci.sol(197:206) at Line 9:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 206,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(206:207) at Line 9:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 207,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(207:210) at Line 9:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 210,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(210:211) at Line 9:23
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 5,
      ParsedValue: 5,
      Span: {
        ByteOffset: 211,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(211:212) at Line 9:24
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 212,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(212:213) at Line 9:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 213,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(213:214) at Line 9:26
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 216,
        ByteLength: 7,
        Serialized: Samples/fibonacci.sol(216:223) at Line 10:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 223,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(223:224) at Line 10:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 224,
        ByteLength: 9,
        Serialized: Samples/fibonacci.sol(224:233) at Line 10:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 233,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(233:234) at Line 10:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 234,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(234:237) at Line 10:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 237,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(237:238) at Line 10:23
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 0,
      ParsedValue: 0,
      Span: {
        ByteOffset: 238,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(238:239) at Line 10:24
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 239,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(239:240) at Line 10:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 240,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(240:241) at Line 10:26
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 243,
        ByteLength: 7,
        Serialized: Samples/fibonacci.sol(243:250) at Line 11:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 250,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(250:251) at Line 11:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 251,
        ByteLength: 9,
        Serialized: Samples/fibonacci.sol(251:260) at Line 11:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 260,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(260:261) at Line 11:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 261,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(261:264) at Line 11:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 264,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(264:265) at Line 11:23
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 1,
      ParsedValue: 1,
      Span: {
        ByteOffset: 265,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(265:266) at Line 11:24
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 266,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(266:267) at Line 11:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 267,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(267:268) at Line 11:26
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 270,
        ByteLength: 7,
        Serialized: Samples/fibonacci.sol(270:277) at Line 12:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 277,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(277:278) at Line 12:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 278,
        ByteLength: 9,
        Serialized: Samples/fibonacci.sol(278:287) at Line 12:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 287,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(287:288) at Line 12:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 288,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(288:291) at Line 12:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 291,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(291:292) at Line 12:23
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 2,
      ParsedValue: 2,
      Span: {
        ByteOffset: 292,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(292:293) at Line 12:24
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 293,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(293:294) at Line 12:25
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 294,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(294:295) at Line 12:26
      }
    },
    {
      Kind: Identifier,
      SourceValue: console,
      Span: {
        ByteOffset: 297,
        ByteLength: 7,
        Serialized: Samples/fibonacci.sol(297:304) at Line 13:2
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: .,
      Span: {
        ByteOffset: 304,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(304:305) at Line 13:9
      }
    },
    {
      Kind: Identifier,
      SourceValue: printline,
      Span: {
        ByteOffset: 305,
        ByteLength: 9,
        Serialized: Samples/fibonacci.sol(305:314) at Line 13:10
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 314,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(314:315) at Line 13:19
      }
    },
    {
      Kind: Identifier,
      SourceValue: fib,
      Span: {
        ByteOffset: 315,
        ByteLength: 3,
        Serialized: Samples/fibonacci.sol(315:318) at Line 13:20
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: (,
      Span: {
        ByteOffset: 318,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(318:319) at Line 13:23
      }
    },
    {
      Kind: ValueInt,
      SourceValue: 20,
      ParsedValue: 20,
      Span: {
        ByteOffset: 319,
        ByteLength: 2,
        Serialized: Samples/fibonacci.sol(319:321) at Line 13:24
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 321,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(321:322) at Line 13:26
      }
    },
    {
      Kind: PunctuationSymbol,
      SourceValue: ),
      Span: {
        ByteOffset: 322,
        ByteLength: 1,
        Serialized: Samples/fibonacci.sol(322:323) at Line 13:27
      }
    }
  ],
  ast: {
    Statements: [
      {
        Args: [
          {
            Name: {
              Kind: Identifier,
              SourceValue: n,
              Span: {
                ByteOffset: 40,
                ByteLength: 1,
                Serialized: Samples/fibonacci.sol(40:41) at Line 2:9
              }
            },
            AstKind: FunctionArg,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 43,
                  ByteLength: 3,
                  Serialized: Samples/fibonacci.sol(43:46) at Line 2:12
                }
              },
              GenericArgs: []
            }
          }
        ],
        Identifier: {
          Kind: Identifier,
          SourceValue: fib,
          Span: {
            ByteOffset: 36,
            ByteLength: 3,
            Serialized: Samples/fibonacci.sol(36:39) at Line 2:5
          }
        },
        Body: {
          Statements: [
            {
              Condition: {
                KindGroup: ComparatorSymbol,
                Kind: Equal,
                Target: {
                  Value: n,
                  AstKind: AtomExpression,
                  TypeAnnotation: {
                    Type: FreshTypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: 0
                    },
                    GenericArgs: []
                  }
                },
                Arg: {
                  Kind: ValueInt,
                  Value: 0,
                  AstKind: AtomExpression,
                  TypeAnnotation: {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int
                    },
                    GenericArgs: []
                  }
                },
                IsParenthesed: true,
                AstKind: BinaryOperatorExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: bool
                  },
                  GenericArgs: []
                }
              },
              Body: {
                Statements: [
                  {
                    Value: {
                      Kind: ValueInt,
                      Value: 0,
                      AstKind: AtomExpression,
                      TypeAnnotation: {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    },
                    AstKind: ReturnExpression
                  }
                ],
                AstKind: StatementBody
              },
              ElseIf: [],
              Kind: If,
              AstKind: IfExpression
            },
            {
              Condition: {
                KindGroup: ComparatorSymbol,
                Kind: LessThanOrEqual,
                Target: {
                  Value: n,
                  AstKind: AtomExpression,
                  TypeAnnotation: {
                    Type: FreshTypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: 0
                    },
                    GenericArgs: []
                  }
                },
                Arg: {
                  Kind: ValueInt,
                  Value: 2,
                  AstKind: AtomExpression,
                  TypeAnnotation: {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int
                    },
                    GenericArgs: []
                  }
                },
                IsParenthesed: true,
                AstKind: BinaryOperatorExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: bool
                  },
                  GenericArgs: []
                }
              },
              Body: {
                Statements: [
                  {
                    Value: {
                      Kind: ValueInt,
                      Value: 1,
                      AstKind: AtomExpression,
                      TypeAnnotation: {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    },
                    AstKind: ReturnExpression
                  }
                ],
                AstKind: StatementBody
              },
              ElseIf: [],
              Kind: If,
              AstKind: IfExpression
            },
            {
              Value: {
                KindGroup: MathSymbol,
                Kind: BinaryPlus,
                Target: {
                  Target: {
                    Value: fib,
                    AstKind: AtomExpression,
                    TypeAnnotation: {
                      Type: TypeAst,
                      Identifier: {
                        Kind: Identifier,
                        SourceValue: Fn
                      },
                      GenericArgs: [
                        {
                          Type: TypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: Tuple
                          },
                          GenericArgs: [
                            {
                              Type: TypeAst,
                              Identifier: {
                                Kind: Identifier,
                                SourceValue: int
                              },
                              GenericArgs: []
                            }
                          ]
                        },
                        {
                          Type: TypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: int,
                            Span: {
                              ByteOffset: 49,
                              ByteLength: 3,
                              Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                            }
                          },
                          GenericArgs: []
                        }
                      ]
                    }
                  },
                  Args: [
                    {
                      KindGroup: MathSymbol,
                      Kind: BinaryMinus,
                      Target: {
                        Value: n,
                        AstKind: AtomExpression,
                        TypeAnnotation: {
                          Type: FreshTypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: 0
                          },
                          GenericArgs: []
                        }
                      },
                      Arg: {
                        Kind: ValueInt,
                        Value: 1,
                        AstKind: AtomExpression,
                        TypeAnnotation: {
                          Type: TypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: int
                          },
                          GenericArgs: []
                        }
                      },
                      AstKind: BinaryOperatorExpression,
                      TypeAnnotation: {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    }
                  ],
                  AstKind: CallOperatorExpression,
                  TypeAnnotation: {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 49,
                        ByteLength: 3,
                        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                      }
                    },
                    GenericArgs: []
                  }
                },
                Arg: {
                  Target: {
                    Value: fib,
                    AstKind: AtomExpression,
                    TypeAnnotation: {
                      Type: TypeAst,
                      Identifier: {
                        Kind: Identifier,
                        SourceValue: Fn
                      },
                      GenericArgs: [
                        {
                          Type: TypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: Tuple
                          },
                          GenericArgs: [
                            {
                              Type: TypeAst,
                              Identifier: {
                                Kind: Identifier,
                                SourceValue: int
                              },
                              GenericArgs: []
                            }
                          ]
                        },
                        {
                          Type: TypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: int,
                            Span: {
                              ByteOffset: 49,
                              ByteLength: 3,
                              Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                            }
                          },
                          GenericArgs: []
                        }
                      ]
                    }
                  },
                  Args: [
                    {
                      KindGroup: MathSymbol,
                      Kind: BinaryMinus,
                      Target: {
                        Value: n,
                        AstKind: AtomExpression,
                        TypeAnnotation: {
                          Type: FreshTypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: 0
                          },
                          GenericArgs: []
                        }
                      },
                      Arg: {
                        Kind: ValueInt,
                        Value: 2,
                        AstKind: AtomExpression,
                        TypeAnnotation: {
                          Type: TypeAst,
                          Identifier: {
                            Kind: Identifier,
                            SourceValue: int
                          },
                          GenericArgs: []
                        }
                      },
                      AstKind: BinaryOperatorExpression,
                      TypeAnnotation: {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    }
                  ],
                  AstKind: CallOperatorExpression,
                  TypeAnnotation: {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 49,
                        ByteLength: 3,
                        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                      }
                    },
                    GenericArgs: []
                  }
                },
                AstKind: BinaryOperatorExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int,
                    Span: {
                      ByteOffset: 49,
                      ByteLength: 3,
                      Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                    }
                  },
                  GenericArgs: []
                }
              },
              AstKind: ReturnExpression
            }
          ],
          AstKind: StatementBody
        },
        ReturnType: {
          Type: TypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: int,
            Span: {
              ByteOffset: 49,
              ByteLength: 3,
              Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
            }
          },
          GenericArgs: []
        },
        Kind: Function,
        AstKind: FunctionDeclaration,
        TypeAnnotation: {
          Type: TypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: int,
            Span: {
              ByteOffset: 49,
              ByteLength: 3,
              Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
            }
          },
          GenericArgs: []
        }
      },
      {
        IsConst: true,
        Identifier: {
          Kind: Identifier,
          SourceValue: console,
          Span: {
            ByteOffset: 163,
            ByteLength: 7,
            Serialized: Samples/fibonacci.sol(163:170) at Line 8:8
          }
        },
        IdentifierValue: console,
        Expression: {
          Kind: Member,
          Target: {
            Value: std,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: io,
              AstKind: AtomExpression
            },
            {
              Value: console,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 4,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 4
            },
            GenericArgs: []
          }
        },
        AstKind: VariableDeclaration,
        TypeAnnotation: {
          Id: 4,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 4
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 5,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 5
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fib,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 49,
                        ByteLength: 3,
                        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 5,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 49,
                  ByteLength: 3,
                  Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 7,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 7
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 8,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 8
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fib,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 49,
                        ByteLength: 3,
                        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 0,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 49,
                  ByteLength: 3,
                  Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 10,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 10
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 11,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 11
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fib,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 49,
                        ByteLength: 3,
                        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 1,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 49,
                  ByteLength: 3,
                  Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 13,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 13
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 14,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 14
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fib,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 49,
                        ByteLength: 3,
                        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 2,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 49,
                  ByteLength: 3,
                  Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 16,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 16
          },
          GenericArgs: []
        }
      },
      {
        Target: {
          Kind: Member,
          Target: {
            Value: console,
            AstKind: AtomExpression
          },
          Path: [
            {
              Value: printline,
              AstKind: AtomExpression
            }
          ],
          AstKind: MemberOperatorExpression,
          TypeAnnotation: {
            Id: 17,
            Type: FreshTypeAst,
            Identifier: {
              Kind: Identifier,
              SourceValue: 17
            },
            GenericArgs: []
          }
        },
        Args: [
          {
            Target: {
              Value: fib,
              AstKind: AtomExpression,
              TypeAnnotation: {
                Type: TypeAst,
                Identifier: {
                  Kind: Identifier,
                  SourceValue: Fn
                },
                GenericArgs: [
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: Tuple
                    },
                    GenericArgs: [
                      {
                        Type: TypeAst,
                        Identifier: {
                          Kind: Identifier,
                          SourceValue: int
                        },
                        GenericArgs: []
                      }
                    ]
                  },
                  {
                    Type: TypeAst,
                    Identifier: {
                      Kind: Identifier,
                      SourceValue: int,
                      Span: {
                        ByteOffset: 49,
                        ByteLength: 3,
                        Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                      }
                    },
                    GenericArgs: []
                  }
                ]
              }
            },
            Args: [
              {
                Kind: ValueInt,
                Value: 20,
                AstKind: AtomExpression,
                TypeAnnotation: {
                  Type: TypeAst,
                  Identifier: {
                    Kind: Identifier,
                    SourceValue: int
                  },
                  GenericArgs: []
                }
              }
            ],
            AstKind: CallOperatorExpression,
            TypeAnnotation: {
              Type: TypeAst,
              Identifier: {
                Kind: Identifier,
                SourceValue: int,
                Span: {
                  ByteOffset: 49,
                  ByteLength: 3,
                  Serialized: Samples/fibonacci.sol(49:52) at Line 2:18
                }
              },
              GenericArgs: []
            }
          }
        ],
        AstKind: CallOperatorExpression,
        TypeAnnotation: {
          Id: 19,
          Type: FreshTypeAst,
          Identifier: {
            Kind: Identifier,
            SourceValue: 19
          },
          GenericArgs: []
        }
      }
    ],
    AstKind: StatementBody
  },
  consoleLogs: [
    5,
    0,
    1,
    1,
    6765
  ]
}